"""This module contains the handler for the generate-hashes command."""

import subprocess
import sys
from pathlib import Path
from typing import Iterable

from exclusion.manager import get_files
from updater.constants import UPDATER_FILE_NAME
from updater.handlers.common import verbose
from updater.helpers import UpdateHelper


def handle_generate_hashes() -> None:
    """Handles the generate-hashes command."""

    print("Generating hashes for the files...")
    generate_updater(get_files())
    print("Hashes generated successfully.")


def generate_updater(paths: Iterable[Path]) -> None:
    """generates hashes for the files"""

    top_level = Path(subprocess.check_output("git rev-parse --show-toplevel", text=True).strip())

    hashes = "generated by updater with following command:\npython -m updater " + " ".join(sys.argv[1:]) + "\n"
    for path in sorted(paths):
        path = path.resolve().absolute()
        try:
            md5_hash = UpdateHelper.md5(path)
        except FileNotFoundError:
            verbose(f"File not found: {path.relative_to(top_level)}")
            continue
        verbose(f"Hash for {path.relative_to(top_level)}: {md5_hash}")
        hashes += "H-" + md5_hash + " " + str(path.relative_to(top_level)) + "\n"

    verbose()

    with open(UPDATER_FILE_NAME, "w", encoding="utf-8") as hashes_fd:
        hashes_fd.write(hashes)
